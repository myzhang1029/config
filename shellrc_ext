#!/bin/sh
# Variables
ADMIN_USER="${ADMIN_USER-$USER}"
export PAGER="less"

## Select an editor and set $EDITOR
for editor in nvim vim nano vi emacs
do
    if type "$editor" >/dev/null 2>&1
    then
        EDITOR="$editor"
        break
    fi
done
[ "$TERM_PROGRAM" = "vscode" ] && EDITOR="code -w"
export EDITOR

## $PATH things
export PATH="$HOME/.myprefix/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/go/bin:$PATH"

## Use vim line editing mode
set -o vi
if [ -n "$ZSH_VERSION" ]
then
    bindkey "^A" beginning-of-line
    bindkey "^E" end-of-line
# else set in .inputrc
fi

# GPG for SSH
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"

fi
gpg-agent --daemon > /dev/null || true

# Fix gpg signing issue if ran as a subprocess
GPG_TTY="$(tty)"
export GPG_TTY


# Functions
## Fetch a git branch
getbranch()
{
    git fetch "$1" "refs/heads/$2:refs/remotes/$1/$2"
}

## Clear with clear delimeter
clear()
{
    printf '%*s\n' 10000 '' | tr ' ' "#"
    printf '%*s\n' 10000 ''
    command clear
}

## Find files in $1 larger than $2
findlarger()
{
    sudo find "$1" -xdev -type f -size "+$2"
}

## Find files in $1 that are largest $2
findlargest()
{
    sudo "du" -ahx "$1" 2>/dev/null | sort -rh | head "-$2"
}

## Do something until it succeeds
tryagain()
{
    while ! "$@"; do :; done
}

## Get a new MAC address for WiFi (macOS)
newmac()
{
    sudo /sbin/ifconfig en0 ether "$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/:$//')"
}

## Zap any app with brew-createzap
zapper()
{
    echo "trash $(
        brew createzap "$1" | sed 's/^zap trash: \[$//;
        s/^\]$//;
        s/,$//;
        s,^ *"~/,"'"$HOME"'/,'|awk -v ORS=' ' 1
    )"
}

## Update autoconf aux
autoconf_aux()
{
    command wget -O- 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' > config.guess
    command wget -O- 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' > config.sub
}

## DNS over HTTPS resolver
doh()
{
    curl -H "Accept: application/dns-json" "https://dns.nextdns.io/dohtest?name=$1&type=${2:-A}" | jq '.Answer'
}

if [ -n "$BASH_VERSION" ]
then
    ## Commit Homebrew cask zap updates: does not work with zsh
    commit_zap()
    (
        cd "$(brew --repository homebrew/cask)/Casks" || return 1
        cask_paths="$(git status -su | sed 's:^ M ::' | xargs)"
    
        for caskpath in $cask_paths
        do
            cask="$(basename "$caskpath" .rb)"
            echo "$cask" at "$caskpath"
            brew audit --cask --online "$cask" || echo "brew audit failed for $cask"
            brew style --fix "$cask" || echo "brew style failed for $cask"
            brew cleanup --prune all
            echo "Press enter to create the commit, or 's' to skip... "
            read -r
            if ! [ "v$REPLY" = "vs" ]
            then
                title="$cask: update zap stanza"
                branch="zap-$cask"
                git switch -c "$branch" || return 1
                git add "$caskpath" || return 1
                git commit -sm "$title" || return 1
                git push myzhang1029 "$branch" || return 1
    
                gh pr create --title "$title" --body-file - --base "homebrew:master" --head "myzhang1029:$branch" --web << 'EOF'
After making any changes to a cask, existing or new, verify:

- [x] The submission is for [a stable version](https://docs.brew.sh/Acceptable-Casks#stable-versions) \
or [documented exception](https://docs.brew.sh/Acceptable-Casks#but-there-is-no-stable-version).
- [x] `brew audit --cask --online <cask>` is error-free.
- [x] `brew style --fix <cask>` reports no offenses.'
EOF
                # Go to the previous commit
                git switch -
            fi
        done
    )
else
    commit_zap()
    {
        echo "Use bash" >&2
        exit 1
    }
fi

# Aliases
## General aliases
### Listing
#### List commands overriding ohmyz
#### status: 0: GNU ls; 1: BSD ls
if ls --help >/dev/null 2>&1
then
    # GNU ls
    alias ls='ls --color'
    alias la='ls -A'
    alias ll='ls -lh'
    alias l='ls -lAh'
else
    # BSD ls
    alias ls="ls -G"
    alias la="ls -GA"
    alias ll="ls -Glh"
    alias l="ls -GlAh"
fi

### Other coreutils
alias du='du -Ph'
alias df='df -h'
#### Do something as the admin
alias suy='sudo "-EHu${ADMIN_USER}"'
#### Shredded revoval
alias srm="shred -fuvxzn100"
#### Recursive download
alias rwget="command wget -cbrxp -nH -np --execute robots=off -U 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15'"
#### Search command history
alias ghis='history|grep'
#### Copy with progress
if type rsync >/dev/null 2>&1
then
    alias pcp="rsync -arP"
else
    alias pcp="cp -r"
fi
#### Use aria2c instead of wget
if type aria2c >/dev/null 2>&1
then
    alias wget="aria2c -x16"
fi

## Python
alias ipy='ipython'

## Homebrew
alias brew='sudo "-EHu${ADMIN_USER}" brew'
### install
alias binst='sudo "-EHu${ADMIN_USER}" brew install'
### uninstall
alias bunins='sudo "-EHu${ADMIN_USER}" brew uninstall'

## Git plugin
alias g="git"

## DNS
alias resolve="dns-sd -G v4v6"

## macOS
### remove the "unsafe" notice of an app
alias enableapp="sudo xattr -d com.apple.quarantine"
alias fflistdev="ffmpeg -hide_banner -f avfoundation -list_devices true -i ''"

## Load other system-local aliases
# shellcheck source=/dev/null
[ -f ~/.local_aliases ] && . ~/.local_aliases


if [ -n "$ZSH_VERSION" ]
then
    # Session history
    alias lochist="fc -lLI 1"
    # Reset terminal options
    precmd() { tput sgr0; printf "\x0f"; }
    # Zsh -s aliases
    if type unar >/dev/null 2>&1
    then
        alias -s gz="unar"
        alias -s tgz="unar"
        alias -s tar="unar"
        alias -s xz="unar"
        alias -s bz2="unar"
        alias -s Z="unar"
        alias -s zip="unar"
    else
        alias -s gz="gunzip"
        alias -s tgz="tar -zxvf"
        alias -s tar="tar -xvf"
        alias -s xz="unxz"
        alias -s bz2="bunzip2"
        alias -s Z="uncompress"
        alias -s zip="unzip"
    fi

    # pip zsh completion start
    _pip_completion()
    {
        # shellcheck disable=SC3043
        local words cword
        read -Ac words
        read -cn cword
        # shellcheck disable=SC3054,SC3030,SC2034
        reply=( $( COMP_WORDS="${words[*]}" \
                   COMP_CWORD=$(( cword-1 )) \
                   PIP_AUTO_COMPLETE=1 ${words[1]} 2>/dev/null ))
    }
    compctl -K _pip_completion pip3
    # pip zsh completion end
    # arduino-cli completion
    if type arduino-cli > /dev/null 2>&1
    then
        eval "$(arduino-cli completion zsh)"
    fi
else
    # Not zsh
    # Use bash-completion, if available
    if [ -f /usr/share/bash-completion/bash_completion ]
    then
            . /usr/share/bash-completion/bash_completion
    fi
    if [ "$PS1" ]
    then
        # oh-my-zsh robbyrussell theme-like prompt
        __bash_prompt_git()
        {
           GIT_OPTIONAL_LOCKS=0 command git "$@"
        }
        
        __bash_git_prompt_info()
        {
            if ! __bash_prompt_git rev-parse --git-dir > /dev/null 2>&1 || \
                [ "$(__bash_prompt_git config --get oh-my-zsh.hide-info 2>/dev/null)" = "1" ]
            then
                return 0
            fi
            # shellcheck disable=SC3043
            local _ref || true
            _ref=$(__bash_prompt_git symbolic-ref --short HEAD 2> /dev/null) || \
                _ref=$(__bash_prompt_git rev-parse --short HEAD 2> /dev/null) || \
                return 0
            printf " \001\e[1;34m\002git:(\001\e[31m\002%s\001\e[34m\002)\001\e[0m\002" "$_ref"
        }
        
        PS1='\[\e[1m\e[$(($?>0?31:32))m\]\u@\H âžœ\[\e[0m\]  \[\e[1;36m\]\W\[\e[0m\]$(__bash_git_prompt_info) '
        # Save history and reset terminal options
        PROMPT_COMMAND='history -a; tput sgr0; printf "\x0f"'
    fi

    # pip bash completion start
    _pip_completion()
    {
        # shellcheck disable=SC3054,SC3030
        COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                       COMP_CWORD=$COMP_CWORD \
                       PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
    }
    complete -o default -F _pip_completion pip3
    # pip bash completion end
    # arduino-cli completion
    if type arduino-cli > /dev/null 2>&1
    then
        eval "$(arduino-cli completion bash)"
    fi
fi

